TODO: Experiment with different approach to world tile spawning
	Current Approach: Choose a random tile that fits best for that section
		The problem with this is, it can get pretty samey and its hard to control the "characteristics" of a level.
	
	New Approach: Start with a flat tile, and for each of its neighbors, choose what terrain shape it will be: flat, ramp up, ramp down, ramp up 2x, ramp down 2x, wall, low wall, high wall. For each of those scenarios, choose a different set of tile classes that fit that type, then go through the normal spawning procedure with that customized set of tile classes

We're now using procedural mesh

DONE: Generate multiple vertices for each face so that UV can be wrapped properly on each face
TODO: Spawn neighboring landscapes when a player enters a landscape
	Keep a running list of all the landscapes
	When a player's position updates and registers that they are within a landscape, spawn that landscape's neighbors
	Sort tiles by distanc eascending, per each player, non replicated, when going through the tiles. Will greatly reduce each frame's iterations of the location update register loop

DONE: Implement height differential
DONE: Delete far away landscapes and save their data to be respawned upon getting close again
	Deleting far away landscapes:
		Upon entering a new landscape, get all the neighbors from the previous tile, and all the neighbors of the new tile. Subtract the new neighbors from the previous neighbors, and what is left of the previous neighbors, delete those tiles.

		Upon entering a new landscape, when spawning the neighbors, check if the landscape tile is contained within ProcMeshDataMap. If it is, spawn the landscape using that data.
TODO: Landscape code cleanup

DONE: Cuboid function staticization. 
TODO: Start working on the movement system, have a wall sliding system, momentum continuity, jumping, thrusting, grinding